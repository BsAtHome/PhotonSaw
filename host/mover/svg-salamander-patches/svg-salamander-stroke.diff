--- ../lib/svg-salamander.src/main/java/com/kitfox/svg/ShapeElement.java	2012-04-25 18:03:27.000000000 +0200
+++ com/kitfox/svg/ShapeElement.java	2012-05-07 18:02:09.000000000 +0200
@@ -327,25 +327,30 @@
             {
                 stroke = new BasicStroke(strokeWidth, strokeLinecap, strokeLinejoin, strokeMiterLimit, strokeDashArray, strokeDashOffset);
             }
-
-            Shape strokeShape;
-            AffineTransform cacheXform = g.getTransform();
-            if (vectorEffect == VECTOR_EFFECT_NON_SCALING_STROKE)
-            {
-                strokeShape = cacheXform.createTransformedShape(shape);
-                strokeShape = stroke.createStrokedShape(strokeShape);
-            }
-            else
-            {
-                strokeShape = stroke.createStrokedShape(shape);
-            }
-
+            
+            
             if (strokeOpacity <= 0)
             {
                 //Do nothing
             }
             else
-            {
+            {            	
+                boolean useDrawInSteadOfFillForStroke = g instanceof SVGGraphics2D && ((SVGGraphics2D) g).useDrawInSteadOfFillForStroke();
+                
+                Shape strokeShape = null;
+                AffineTransform cacheXform = g.getTransform();
+                if (!useDrawInSteadOfFillForStroke) {
+	                if (vectorEffect == VECTOR_EFFECT_NON_SCALING_STROKE)
+	                {
+	                    strokeShape = cacheXform.createTransformedShape(shape);
+	                    strokeShape = stroke.createStrokedShape(strokeShape);
+	                }
+	                else
+	                {
+	                    strokeShape = stroke.createStrokedShape(shape);
+	                }
+                }
+            	
                 Composite cachedComposite = g.getComposite();
 
                 if (strokeOpacity < 1f)
@@ -360,7 +365,13 @@
                 }
 
                 g.setPaint(strokePaint);
-                g.fill(strokeShape);
+
+                if (useDrawInSteadOfFillForStroke) {
+                	g.setStroke(stroke);
+                	g.draw(shape); 
+                } else {
+                	g.fill(strokeShape);
+                }
 
                 if (vectorEffect == VECTOR_EFFECT_NON_SCALING_STROKE)
                 {
diff --git a/host/mover/src/com/kitfox/svg/SVGGraphics2D.java b/host/mover/src/com/kitfox/svg/SVGGraphics2D.java
index eb0aa23..c4453f2 100644
--- com/kitfox/svg/SVGGraphics2D.java
+++ com/kitfox/svg/SVGGraphics2D.java
@@ -2,7 +2,8 @@ package com.kitfox.svg;
 
 /**
  * Interface that can be implemented by the Graphics2D object
- * passed to SVGDiagram.render() 
+ * passed to SVGDiagram.render() to enable SVGSalamander specific
+ * functionality during rendering.
  * 
  * @author Flemming Frandsen <dren.dk@gmail.com> <http://dren.dk>
  */
@@ -17,4 +18,16 @@ public interface SVGGraphics2D {
 	 * @param element the next element that's going to be rendered
 	 */
 	void startRendering(RenderableElement element);
+	
+	/**
+	 * SVGSalamander usually constructs a Shape which is an outline of the stroke, by returning
+	 * true here it will in stead call setStroke and draw that stroke using draw.
+	 * 
+	 * Using draw is less accurate if you care about having the output look correct on a raster display,
+	 * but it is also more accurate if you care about the exact path and it's potentially much faster.    
+	 * 
+	 * @return true if you prefer to get a call to draw in stead of fill for outlines
+	 */
+	boolean useDrawInSteadOfFillForStroke();
+	
 }
